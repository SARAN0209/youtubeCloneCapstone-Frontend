{"ast":null,"code":"/*\ncreateSlice() : slice componentlerin oluşturulmasını sağlar. createSlice()\niçerisinde \"name: reducer adı\", \"initialState: başlangıç state'i\" ve \n\"reducers: çalıştırılacak fonksiyonlar\" tanımlamaları yapılmalıdır.\n\n  import {createSlice} from \"@reduxjs/toolkit\";\n\n  const themeSlice = createSlice({\n     name: \"theme\",\n     initialState: {value: initialStateValue},\n     reducers: {\n         setTheme: (state, action) =>{\n            state.value = action.payload;\n            console.log(state.value)\n         }\n     }\n  })\n*/\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  /* User durumu başlangıç değeri olarak 0'dır. */\n  currentUser: null,\n\n  /* Loading durumu başlangıçta false olacak, login olduğunda true'ya dönecek */\n  loading: false,\n\n  /* Eğer bir hata olursa error değeri true'ya dönecek. */\n  error: false\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    /* Reducers */\n    loginStart: state => {\n      /* Yüklenmeye başladığında true değerini alacak. */\n      state.loading = true;\n    },\n    loginSuccess: (state, action, payload) => {\n      /* Eğer başarılı olursa bir kullanıcımızın var olduğu anlamına gelir. \n      Kullanıcı gelirse loading false olacak. */\n      state.loading = false;\n      state.currentUser = action.payload;\n    },\n    loginFailure: state => {\n      /* Kullanıcı değeri yüklendiğinde false değerini alacak. */\n      state.loading = false;\n      state.error = true;\n    },\n    logout: state => {\n      /* Logout işleminde state başlangıç değeri aktif olacak. */\n      state.currentUser = null;\n      state.loading = false;\n      state.error = false;\n    }\n  }\n});\n/* createAction() actionları export etmeyi sağlar, alternatif kullanımı `export const {} = slice.actions` 'dur */\n\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout\n} = userSlice.actions;\nexport default userSlice.reducer;\n/* createReducer() reducerların dışarı aktarılmasını sağlar. */","map":{"version":3,"names":["createSlice","initialState","currentUser","loading","error","userSlice","name","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","actions","reducer"],"sources":["D:/B38wdtamilbatch/Youtube Clone Final Project/client/src/redux/userSlice.js"],"sourcesContent":["/*\ncreateSlice() : slice componentlerin oluşturulmasını sağlar. createSlice()\niçerisinde \"name: reducer adı\", \"initialState: başlangıç state'i\" ve \n\"reducers: çalıştırılacak fonksiyonlar\" tanımlamaları yapılmalıdır.\n\n  import {createSlice} from \"@reduxjs/toolkit\";\n\n  const themeSlice = createSlice({\n     name: \"theme\",\n     initialState: {value: initialStateValue},\n     reducers: {\n         setTheme: (state, action) =>{\n            state.value = action.payload;\n            console.log(state.value)\n         }\n     }\n  })\n*/\n\nimport {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    /* User durumu başlangıç değeri olarak 0'dır. */\n    currentUser: null,\n    /* Loading durumu başlangıçta false olacak, login olduğunda true'ya dönecek */\n    loading: false,\n    /* Eğer bir hata olursa error değeri true'ya dönecek. */\n    error: false\n};\n\nexport const userSlice = createSlice({\n      name: 'user',\n      initialState,\n      reducers: {\n        /* Reducers */\n        loginStart: (state) => {\n            /* Yüklenmeye başladığında true değerini alacak. */\n            state.loading = true;\n        },\n        loginSuccess: (state, action, payload) => {\n            /* Eğer başarılı olursa bir kullanıcımızın var olduğu anlamına gelir. \n            Kullanıcı gelirse loading false olacak. */\n            state.loading = false;\n            state.currentUser = action.payload;\n        },\n        loginFailure: (state) => {\n            /* Kullanıcı değeri yüklendiğinde false değerini alacak. */\n            state.loading = false;\n            state.error = true;\n        },\n        logout: (state)=> {\n            /* Logout işleminde state başlangıç değeri aktif olacak. */\n            state.currentUser = null;\n            state.loading = false;\n            state.error = false;\n        }\n      }\n});\n\n/* createAction() actionları export etmeyi sağlar, alternatif kullanımı `export const {} = slice.actions` 'dur */\nexport const {\n    loginStart, \n    loginSuccess, \n    loginFailure, \n    logout\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n\n/* createReducer() reducerların dışarı aktarılmasını sağlar. */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;EACjB;EACAC,WAAW,EAAE,IAFI;;EAGjB;EACAC,OAAO,EAAE,KAJQ;;EAKjB;EACAC,KAAK,EAAE;AANU,CAArB;AASA,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,MADyB;EAE/BL,YAF+B;EAG/BM,QAAQ,EAAE;IACR;IACAC,UAAU,EAAGC,KAAD,IAAW;MACnB;MACAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;IACH,CALO;IAMRO,YAAY,EAAE,CAACD,KAAD,EAAQE,MAAR,EAAgBC,OAAhB,KAA4B;MACtC;AACZ;MACYH,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACP,WAAN,GAAoBS,MAAM,CAACC,OAA3B;IACH,CAXO;IAYRC,YAAY,EAAGJ,KAAD,IAAW;MACrB;MACAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACL,KAAN,GAAc,IAAd;IACH,CAhBO;IAiBRU,MAAM,EAAGL,KAAD,IAAU;MACd;MACAA,KAAK,CAACP,WAAN,GAAoB,IAApB;MACAO,KAAK,CAACN,OAAN,GAAgB,KAAhB;MACAM,KAAK,CAACL,KAAN,GAAc,KAAd;IACH;EAtBO;AAHqB,CAAD,CAA7B;AA6BP;;AACA,OAAO,MAAM;EACTI,UADS;EAETE,YAFS;EAGTG,YAHS;EAITC;AAJS,IAKTT,SAAS,CAACU,OALP;AAOP,eAAeV,SAAS,CAACW,OAAzB;AAEA"},"metadata":{},"sourceType":"module"}